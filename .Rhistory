convert_percent <- function (number) {
# print(number)
if (!is.na(number)) {
if (number == "~50%") {
number = 50
number <- as.numeric(number)
} else if (number < 1 & number > 0) {
# print("HERE")
# print(class(number))
number <- as.numeric(number)
number <-  number * 100
}
}
number
}
test2 <- sapply(test, convert_percent)
test2
rm(test2)
test2 <- sapply(test, convert_percent)
test2
View(test2)
proportionAA <- rawAdHoc$AH3
proportionAA <- sapply(proportionAA, convert_percent)
View(proportionAA)
# test <- sapply(rawAdHoc[,"AH3"], convert_percent)
rawAdHoc$AH3 <- proportionAA
class(rawAdHoc$AH3)
rawAdHoc$AH3 <- as.numeric(rawAdHoc$AH3)
rm(list=ls())
rawAdHoc <- read.xlsx("./SRA AA Workshop - DISAGGREGATED FOR R v2.1.xlsx", sheet = 2, colNames  = TRUE)
rawMCDA <- read.xlsx("./SRA AA Workshop - DISAGGREGATED FOR R v2.1.xlsx", sheet = 3, colNames  = TRUE)
rawSDM <- read.xlsx("./SRA AA Workshop - DISAGGREGATED FOR R v2.1.xlsx", sheet = 4, colNames  = TRUE)
# Prepare and add empty rows for missing responses
AdHocEmptyRow <-  rep(NA, 63)
AdHocEmptyRow[9] = "Amelia Nestler"
rawAdHoc <- rbind(rawAdHoc, AdHocEmptyRow)
SDMEmptyRow <-  rep(NA, 63)
SDMEmptyRow[9] = "Martin Wolf"
rawSDM <- rbind(rawSDM, SDMEmptyRow)
# Sort by NAME
rawAdHoc <- rawAdHoc[order(rawAdHoc$NAME),]
rawMCDA <- rawMCDA[order(rawMCDA$NAME),]
rawSDM <- rawSDM[order(rawSDM$NAME),]
# Add NAME_SUBJECT and EXERCISE columns
rawAdHoc <- cbind(EXERCISE = 0, rawAdHoc)
rawAdHoc <- cbind(SUBJECT = 0, rawAdHoc)
rawAdHoc$SUBJECT <- 1:12
rawAdHoc$EXERCISE <- "Ad Hoc"
rawMCDA <- cbind(EXERCISE = 0, rawMCDA)
rawMCDA <- cbind(SUBJECT = 0, rawMCDA)
rawMCDA$SUBJECT <- 1:12
rawMCDA$EXERCISE <- "MCDA"
colnames(rawMCDA)[ncol(rawMCDA)] <- "FEEDBACK"
rawSDM <- cbind(EXERCISE = 0, rawSDM)
rawSDM <- cbind(SUBJECT = 0, rawSDM)
rawSDM$SUBJECT <- 1:12
rawSDM$EXERCISE <- "SDM"
colnames(rawSDM)[ncol(rawSDM)] <- "FEEDBACK"
# Clean up AH3 column - is the subject's proportion of work that is AA related
# If the subject entered in a % sign, the survey saved this as 0 - 1, so 20% is 0.2.
# if the subject left out the % sign, it saved this field as the number they entered
convert_percent <- function (number) {
# print(number)
if (!is.na(number)) {
if (number == "~50%") {
number = 50
number <- as.numeric(number)
} else if (number < 1 & number > 0) {
# print("HERE")
# print(class(number))
number <- as.numeric(number)
number <-  number * 100
}
}
number
}
proportionAA <- rawAdHoc$AH3
proportionAA <- sapply(proportionAA, convert_percent)
rawAdHoc$proportionAA <- proportionAA
rawAdHoc$proportionAA <- as.numeric(rawAdHoc$proportionAA)
rm(list=ls())
library("openxlsx")
library("ggplot2")
# # cameraDataXLS <- read.xlsx("./data/SRA AA Workshop - At Home Exercise SUMMARY.csv", sheetIndex = 1, header = TRUE)
# rawAdHoc <- read.xlsx("./SRA AA Workshop - COMBINED v0.4 FOR R.xlsx", sheet = 1, colNames  = TRUE)
# head(rawAdHoc)
rawAdHoc <- read.xlsx("./SRA AA Workshop - DISAGGREGATED FOR R v2.1.xlsx", sheet = 2, colNames  = TRUE)
rawMCDA <- read.xlsx("./SRA AA Workshop - DISAGGREGATED FOR R v2.1.xlsx", sheet = 3, colNames  = TRUE)
rawSDM <- read.xlsx("./SRA AA Workshop - DISAGGREGATED FOR R v2.1.xlsx", sheet = 4, colNames  = TRUE)
# Prepare and add empty rows for missing responses
AdHocEmptyRow <-  rep(NA, 63)
AdHocEmptyRow[9] = "Amelia Nestler"
rawAdHoc <- rbind(rawAdHoc, AdHocEmptyRow)
SDMEmptyRow <-  rep(NA, 63)
SDMEmptyRow[9] = "Martin Wolf"
rawSDM <- rbind(rawSDM, SDMEmptyRow)
# Sort by NAME
rawAdHoc <- rawAdHoc[order(rawAdHoc$NAME),]
rawMCDA <- rawMCDA[order(rawMCDA$NAME),]
rawSDM <- rawSDM[order(rawSDM$NAME),]
# Add NAME_SUBJECT and EXERCISE columns
rawAdHoc <- cbind(EXERCISE = 0, rawAdHoc)
rawAdHoc <- cbind(SUBJECT = 0, rawAdHoc)
rawAdHoc$SUBJECT <- 1:12
rawAdHoc$EXERCISE <- "Ad Hoc"
rawMCDA <- cbind(EXERCISE = 0, rawMCDA)
rawMCDA <- cbind(SUBJECT = 0, rawMCDA)
rawMCDA$SUBJECT <- 1:12
rawMCDA$EXERCISE <- "MCDA"
colnames(rawMCDA)[ncol(rawMCDA)] <- "FEEDBACK"
rawSDM <- cbind(EXERCISE = 0, rawSDM)
rawSDM <- cbind(SUBJECT = 0, rawSDM)
rawSDM$SUBJECT <- 1:12
rawSDM$EXERCISE <- "SDM"
colnames(rawSDM)[ncol(rawSDM)] <- "FEEDBACK"
# Clean up AH3 column - is the subject's proportion of work that is AA related
# If the subject entered in a % sign, the survey saved this as 0 - 1, so 20% is 0.2.
# if the subject left out the % sign, it saved this field as the number they entered
convert_percent <- function (number) {
# print(number)
if (!is.na(number)) {
if (number == "~50%") {
number = 50
number <- as.numeric(number)
} else if (number < 1 & number > 0) {
# print("HERE")
# print(class(number))
number <- as.numeric(number)
number <-  number * 100
}
}
number
}
proportionAA <- rawAdHoc$AH3
proportionAA <- sapply(proportionAA, convert_percent)
rawAdHoc$proportionAA <- proportionAA
rawAdHoc$proportionAA <- as.numeric(rawAdHoc$proportionAA)
# Remove all but the columns of interest
proAdHoc <- rawAdHoc[, c(1, 2, 9, 11, 17, 22, 25, 30, 34, 38, 42, 45, 48, 51, 54, 56, 58)]
proMCDA <- rawMCDA[, c(1, 2, 9, 11, 17, 22, 25, 30, 34, 38, 42, 45, 48, 51, 54, 56, 58)]
proSDM <- rawSDM[, c(1, 2, 9, 11, 17, 22, 25, 30, 34, 38, 42, 45, 48, 51, 54, 56, 58)]
# Convert factor columns to factors
proAdHoc$GROUP_CODE <- as.factor(proAdHoc$GROUP_CODE)
proAdHoc$EXERCISE <- as.factor(proAdHoc$EXERCISE)
proMCDA$GROUP_CODE <- as.factor(proMCDA$GROUP_CODE)
proMCDA$EXERCISE <- as.factor(proMCDA$EXERCISE)
proSDM$GROUP_CODE <- as.factor(proSDM$GROUP_CODE)
proSDM$EXERCISE <- as.factor(proSDM$EXERCISE)
# Create factors for ANOVA comparisons
# Happy vs not happy with Ad Hoc
proAdHoc <- mutate(proAdHoc, HAPPY = ifelse((proAdHoc$SATISFIED_DECISION >= 4 | proAdHoc$SATISFIED_APPROACH >= 4), "HAPPY", "NOT HAPPY"))
proMCDA$HAPPY <- proAdHoc$HAPPY
proSDM$HAPPY <- proAdHoc$HAPPY
# High vs Low experience with AA
# Merge data vertically to prep for ANOVA
mergedData_vertical <- rbind(proAdHoc, proMCDA, proSDM)
mergedData_AH_MCDA <- rbind(proAdHoc, proMCDA)
mergedData_AH_SDM <- rbind(proAdHoc, proSDM)
mergedData_MCDA_SDM <- rbind(proMCDA, proSDM)
View(proAdHoc)
View(proAdHoc)
View(rawAdHoc)
rawSDM$proportionAA <- as.numeric(rawAdHoc$proportionAA)
View(proSDM)
View(rawSDM)
View(rawSDM)
View(rawSDM)
rm(list=ls())
library("openxlsx")
library("ggplot2")
# # cameraDataXLS <- read.xlsx("./data/SRA AA Workshop - At Home Exercise SUMMARY.csv", sheetIndex = 1, header = TRUE)
# rawAdHoc <- read.xlsx("./SRA AA Workshop - COMBINED v0.4 FOR R.xlsx", sheet = 1, colNames  = TRUE)
# head(rawAdHoc)
rawAdHoc <- read.xlsx("./SRA AA Workshop - DISAGGREGATED FOR R v2.1.xlsx", sheet = 2, colNames  = TRUE)
rawMCDA <- read.xlsx("./SRA AA Workshop - DISAGGREGATED FOR R v2.1.xlsx", sheet = 3, colNames  = TRUE)
rawSDM <- read.xlsx("./SRA AA Workshop - DISAGGREGATED FOR R v2.1.xlsx", sheet = 4, colNames  = TRUE)
# Prepare and add empty rows for missing responses
AdHocEmptyRow <-  rep(NA, 63)
AdHocEmptyRow[9] = "Amelia Nestler"
rawAdHoc <- rbind(rawAdHoc, AdHocEmptyRow)
SDMEmptyRow <-  rep(NA, 63)
SDMEmptyRow[9] = "Martin Wolf"
rawSDM <- rbind(rawSDM, SDMEmptyRow)
# Sort by NAME
rawAdHoc <- rawAdHoc[order(rawAdHoc$NAME),]
rawMCDA <- rawMCDA[order(rawMCDA$NAME),]
rawSDM <- rawSDM[order(rawSDM$NAME),]
# Add NAME_SUBJECT and EXERCISE columns
rawAdHoc <- cbind(EXERCISE = 0, rawAdHoc)
rawAdHoc <- cbind(SUBJECT = 0, rawAdHoc)
rawAdHoc$SUBJECT <- 1:12
rawAdHoc$EXERCISE <- "Ad Hoc"
rawMCDA <- cbind(EXERCISE = 0, rawMCDA)
rawMCDA <- cbind(SUBJECT = 0, rawMCDA)
rawMCDA$SUBJECT <- 1:12
rawMCDA$EXERCISE <- "MCDA"
colnames(rawMCDA)[ncol(rawMCDA)] <- "FEEDBACK"
rawSDM <- cbind(EXERCISE = 0, rawSDM)
rawSDM <- cbind(SUBJECT = 0, rawSDM)
rawSDM$SUBJECT <- 1:12
rawSDM$EXERCISE <- "SDM"
colnames(rawSDM)[ncol(rawSDM)] <- "FEEDBACK"
convert_percent <- function (number) {
# print(number)
if (!is.na(number)) {
if (number == "~50%") {
number = 50
number <- as.numeric(number)
} else if (number < 1 & number > 0) {
# print("HERE")
# print(class(number))
number <- as.numeric(number)
number <-  number * 100
}
}
number
}
proportionAA <- rawAdHoc$AH3
proportionAA <- sapply(proportionAA, convert_percent)
rawAdHoc$proportionAA <- proportionAA
rawAdHoc$proportionAA <- as.numeric(rawAdHoc$proportionAA)
rawMCDA$proportionAA <- as.numeric(rawAdHoc$proportionAA)
rawSDM$proportionAA <- as.numeric(rawAdHoc$proportionAA)
# Remove all but the columns of interest
proAdHoc <- rawAdHoc[, c(1, 2, 9, 11, 17, 22, 25, 30, 34, 38, 42, 45, 48, 51, 54, 56, 58)]
proMCDA <- rawMCDA[, c(1, 2, 9, 11, 17, 22, 25, 30, 34, 38, 42, 45, 48, 51, 54, 56, 58)]
proSDM <- rawSDM[, c(1, 2, 9, 11, 17, 22, 25, 30, 34, 38, 42, 45, 48, 51, 54, 56, 58)]
rm(list=ls())
library("openxlsx")
library("ggplot2")
# # cameraDataXLS <- read.xlsx("./data/SRA AA Workshop - At Home Exercise SUMMARY.csv", sheetIndex = 1, header = TRUE)
# rawAdHoc <- read.xlsx("./SRA AA Workshop - COMBINED v0.4 FOR R.xlsx", sheet = 1, colNames  = TRUE)
# head(rawAdHoc)
rawAdHoc <- read.xlsx("./SRA AA Workshop - DISAGGREGATED FOR R v2.1.xlsx", sheet = 2, colNames  = TRUE)
rawMCDA <- read.xlsx("./SRA AA Workshop - DISAGGREGATED FOR R v2.1.xlsx", sheet = 3, colNames  = TRUE)
rawSDM <- read.xlsx("./SRA AA Workshop - DISAGGREGATED FOR R v2.1.xlsx", sheet = 4, colNames  = TRUE)
# Prepare and add empty rows for missing responses
AdHocEmptyRow <-  rep(NA, 63)
AdHocEmptyRow[9] = "Amelia Nestler"
rawAdHoc <- rbind(rawAdHoc, AdHocEmptyRow)
SDMEmptyRow <-  rep(NA, 63)
SDMEmptyRow[9] = "Martin Wolf"
rawSDM <- rbind(rawSDM, SDMEmptyRow)
# Sort by NAME
rawAdHoc <- rawAdHoc[order(rawAdHoc$NAME),]
rawMCDA <- rawMCDA[order(rawMCDA$NAME),]
rawSDM <- rawSDM[order(rawSDM$NAME),]
# Add NAME_SUBJECT and EXERCISE columns
rawAdHoc <- cbind(EXERCISE = 0, rawAdHoc)
rawAdHoc <- cbind(SUBJECT = 0, rawAdHoc)
rawAdHoc$SUBJECT <- 1:12
rawAdHoc$EXERCISE <- "Ad Hoc"
rawMCDA <- cbind(EXERCISE = 0, rawMCDA)
rawMCDA <- cbind(SUBJECT = 0, rawMCDA)
rawMCDA$SUBJECT <- 1:12
rawMCDA$EXERCISE <- "MCDA"
colnames(rawMCDA)[ncol(rawMCDA)] <- "FEEDBACK"
rawSDM <- cbind(EXERCISE = 0, rawSDM)
rawSDM <- cbind(SUBJECT = 0, rawSDM)
rawSDM$SUBJECT <- 1:12
rawSDM$EXERCISE <- "SDM"
colnames(rawSDM)[ncol(rawSDM)] <- "FEEDBACK"
## Create factors for ANOVA comparisons
# Happy vs not happy with Ad Hoc
rawAdHoc <- mutate(rawAdHoc, HAPPY = ifelse((rawAdHoc$SATISFIED_DECISION >= 4 | rawAdHoc$SATISFIED_APPROACH >= 4), "HAPPY", "NOT HAPPY"))
rawMCDA$HAPPY <- proAdHoc$HAPPY
rawSDM$HAPPY <- proAdHoc$HAPPY
rawMCDA$HAPPY <- rawAdHoc$HAPPY
rawSDM$HAPPY <- rawAdHoc$HAPPY
convert_percent <- function (number) {
# print(number)
if (!is.na(number)) {
if (number == "~50%") {
number = 50
number <- as.numeric(number)
} else if (number < 1 & number > 0) {
# print("HERE")
# print(class(number))
number <- as.numeric(number)
number <-  number * 100
}
}
number
}
proportionAA <- rawAdHoc$AH3
proportionAA <- sapply(proportionAA, convert_percent)
rawAdHoc$proportionAA <- proportionAA
rawAdHoc$proportionAA <- as.numeric(rawAdHoc$proportionAA)
rawMCDA$proportionAA <- as.numeric(rawAdHoc$proportionAA)
rawSDM$proportionAA <- as.numeric(rawAdHoc$proportionAA)
# Remove all but the columns of interest
proAdHoc <- rawAdHoc[, c(1, 2, 9, 62, 63, 11, 17, 22, 25, 30, 34, 38, 42, 45, 48, 51, 54, 56, 58)]
proMCDA <- rawMCDA[, c(1, 2, 9, 62, 63, 11, 17, 22, 25, 30, 34, 38, 42, 45, 48, 51, 54, 56, 58)]
proSDM <- rawSDM[, c(1, 2, 9, 62, 63, 11, 17, 22, 25, 30, 34, 38, 42, 45, 48, 51, 54, 56, 58)]
View(proMCDA)
View(proSDM)
proAdHoc$GROUP_CODE <- as.factor(proAdHoc$GROUP_CODE)
proAdHoc$EXERCISE <- as.factor(proAdHoc$EXERCISE)
proAdHoc$HAPPY <- as.factor(proAdHoc$HAPPY)
proMCDA$GROUP_CODE <- as.factor(proMCDA$GROUP_CODE)
proMCDA$EXERCISE <- as.factor(proMCDA$EXERCISE)
proMCDA$HAPPY <- as.factor(proMCDA$HAPPY)
proSDM$GROUP_CODE <- as.factor(proSDM$GROUP_CODE)
proSDM$EXERCISE <- as.factor(proSDM$EXERCISE)
proSDM$HAPPY <- as.factor(proSDM$HAPPY)
# Merge data vertically to prep for ANOVA
mergedData_vertical <- rbind(proAdHoc, proMCDA, proSDM)
mergedData_AH_MCDA <- rbind(proAdHoc, proMCDA)
mergedData_AH_SDM <- rbind(proAdHoc, proSDM)
mergedData_MCDA_SDM <- rbind(proMCDA, proSDM)
rm(list=ls())
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="./data/question1.csv", method="curl")
Q1 <- read.csv("./data/question1.csv")
head(Q1)
head(Q1,n=2)
split_list <- strsplit(names(Q1), "wgtp")
View(split_list)
View(split_list)
split_list[123]
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile="./data/question2.csv", method="curl")
Q2 <- read.csv("./data/question2.csv")
head(Q2, n=1)
Q2$Gross.domestic.product.2012
# Q2 <- read.csv("./data/question2.csv")
GDP <- read.csv(f1, skip = 4, nrows = 215)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile="./data/question2.csv", method="curl")
# Q2 <- read.csv("./data/question2.csv")
GDP <- read.csv(fileUrl, skip = 4, nrows = 215)
GDP2 <- dplyr::rename(GDP,  CountryCode = X, rankingGDP = X.1, Long.Name = X.3, gdp = X.4)
View(GDP2)
View(GDP2)
gsub(",", "", GDP2$gdp, fixed = TRUE)
GDP2$gdp <- gsub(",", "", GDP2$gdp, fixed = TRUE)
print(mean(GDP2$gdp))
GDP2$gdp <- as.numeric(gsub(",", "", GDP2$gdp, fixed = TRUE))
print(mean(GDP2$gdp))
?mean
print(mean(GDP2$gdp, na.rm=TRUE))
# QUESTION 3
grep("^United",GDP$countryNames)
# QUESTION 3
grep("^United",GDP$Long.Name)
GDP$Long.Name
View(GDP)
# QUESTION 3
grep("^United",GDP2$Long.Name)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile="./data/GDP_Q4.csv", method="curl")
GDP <- read.csv(fileUrl, skip = 4, nrows = 215)
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl2, destfile="./data/EDUCATION_Q4.csv", method="curl")
EDUCATION <- read.csv(fileUrl2)
View(EDUCATION)
View(EDUCATION)
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl2, destfile="./data/EDUCATION_Q4.csv", method="curl")
EDUCATION <- read.csv(fileUrl2)
View(EDUCATION)
names(EDUCATION)
getwd()
setwd("~/Documents/COURSERA/Data Science/Course3_GettingAndCleaningData/Week 4")
# QUESTION 1
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="./data/question1.csv", method="curl")
Q1 <- read.csv("./data/question1.csv")
split_list <- strsplit(names(Q1), "wgtp")
split_list[123]
# QUESTION 2
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile="./data/question2.csv", method="curl")
# Q2 <- read.csv("./data/question2.csv")
GDP <- read.csv(fileUrl, skip = 4, nrows = 215)
# Problem - the GDP data columns aren't labled meaningfully
# Need to change names to match with the STATS columns
GDP2 <- dplyr::rename(GDP,  CountryCode = X, rankingGDP = X.1, Long.Name = X.3, gdp = X.4)
GDP2$gdp <- as.numeric(gsub(",", "", GDP2$gdp, fixed = TRUE))
print(mean(GDP2$gdp, na.rm=TRUE))
# QUESTION 3
grep("^United",GDP2$Long.Name)
# QUESTION 4
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile="./data/GDP_Q4.csv", method="curl")
GDP <- read.csv(fileUrl, skip = 4, nrows = 215)
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl2, destfile="./data/EDUCATION_Q4.csv", method="curl")
EDUCATION <- read.csv(fileUrl2)
GDP <- read.csv(fileUrl, skip = 4, nrows = 215)
View(GDP)
GDP <- read.csv(fileUrl, skip = 4, nrows = 215)
GDP <- dplyr::rename(GDP,  CountryCode = X, rankingGDP = X.1, Long.Name = X.3, gdp = X.4)
GDP$gdp <- as.numeric(gsub(",", "", GDP$gdp, fixed = TRUE))
GDP_tidy <- GDP[,c(1,2,4,5)]
View(GDP_tidy)
?merge
# Merge data
Q4_merged <- merge(GDP_tidy, EDUCATION, by.x="CountryCode")
# Merge data
Q4_merged <- merge(GDP_tidy, EDUCATION, by="CountryCode")
View(Q4_merged)
names(Q4_merged)
?grep
?grepl
grepl("fiscal", Q4_merged)
grepl("fiscal", Q4_merged$Special.Notes)
Q4_merged(grepl("fiscal", Q4_merged$Special.Notes),)
Q4_merged[grepl("fiscal", Q4_merged$Special.Notes),]
# Look for the word 'fiscal' in the data
fiscalYearEnd <- grepl("fiscal year end", Q4_merged$Special.Notes)
View(fiscalYearEnd)
# Look for the word 'fiscal' in the data
fiscalYearEnd <- grepl("Fiscal year end", Q4_merged$Special.Notes)
endInJune <- grepl("June", Q4_merged[fiscalYearEnd,])
View(endInJune)
Q4_merged[fiscalYearEnd,]
endInJune <- grepl("June", Q4_merged$Special.Notes[fiscalYearEnd,])
endInJune <- grepl("June", Q4_merged[fiscalYearEnd,Special.Notes])
Q4_merged$Special.Notes[fiscalYearEnd,]
Q4_merged$Special.Notes
Q4_merged$Special.Notes[fiscalYearEnd]
endInJune <- grepl("June", Q4_merged$Special.Notes[fiscalYearEnd])
table(endInJune)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(quantmod)
install.packages(quantmod)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(sampleTimes)
class(sampleTimes)
# How many values were collected in 2012? How many values were collected on Mondays in 2012?
sampleTimes[1]
# How many values were collected in 2012? How many values were collected on Mondays in 2012?
year(sampleTimes[1])
# How many values were collected in 2012? How many values were collected on Mondays in 2012?
year(sampleTimes)
# How many values were collected in 2012? How many values were collected on Mondays in 2012?
num2012 <- year(sampleTimes)==2012
# How many values were collected in 2012? How many values were collected on Mondays in 2012?
num2012 <- sampleTimes[year(sampleTimes)==2012]
head(num2012)
# How many values were collected on Mondays in 2012?
mondays <- num2012[weekdays(num2012)=="Monday"]
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="./data/question1.csv", method="curl")
Q1 <- read.csv("./data/question1.csv")
split_list <- strsplit(names(Q1), "wgtp")
split_list[123]
rm(list=ls())
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile="./data/wearables_data.zip", method="curl")
unz("./data/wearables_data.zip")
?unz
?unzip
function (..., .env = parent.frame())
data <- read.table(unzip("./data/wearables_data.zip"), head=FALSE)
data <- read.table(unzip("./data/wearables_data.zip"), head=FALSE)
unzip("./data/wearables_data.zip")
unzip("./data/wearables_data.zip")
unz("./data/wearables_data.zip")
?unz
unzip("./data/wearables_data.zip", "./data")
data <- read.table(unzip("./data/wearables_data.zip", exdir="./data"), head=FALSE)
unzip("./data/wearables_data.zip", exdir="./data")
setwd("~/Documents/COURSERA/Data Science/Course3_GettingAndCleaningData/Final Project")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile="./data/wearables_data.zip", method="curl")
unzip("./data/wearables_data.zip", exdir="./data")
test <- read.csv("./data/UCI HAR Dataset/train/Inertial Signals")
test <- read.csv("./data/UCI HAR Dataset/train/Inertial Signals/body_gyro_y_train.txt")
View(test)
test[3]
class(test)
test[3,]
?read.csv
test <- read.csv("./data/UCI HAR Dataset/train/Inertial Signals/body_gyro_y_train.txt", header=FALSE)
rm(test)
test$body_gyro_y_train <- read.csv("./data/UCI HAR Dataset/train/Inertial Signals/body_gyro_y_train.txt", header=FALSE)
test <- dplyr::rename(test, body_gyro_y_train=V1)
test <- dplyr::rename(test, V1=body_gyro_y_train)
test <- read.csv("./data/UCI HAR Dataset/train/Inertial Signals/body_gyro_y_train.txt", header=FALSE)
test <- dplyr::rename(test, V1=body_gyro_y_train)
test <- read.csv("./data/UCI HAR Dataset/train/Inertial Signals/body_gyro_y_train.txt", header=FALSE)
test <- dplyr::rename(test, V1 = body_gyro_y_train)
test <- dplyr::rename(test, V1 = something)
test <- dplyr::rename(test, V1 = "body_gyro_y_train")
head(test)
?rename
test <- dplyr::rename(test, body_gyro_y_train = V1)
View(test)
View(test)
test <- read.csv("./data/UCI HAR Dataset/train/Inertial Signals/body_gyro_y_train.txt", header=FALSE)
test <- dplyr::rename(test, body_gyro_y_train = V1)
df <- read.csv("./data/UCI HAR Dataset/train/subject_train.txt", header=FALSE)
